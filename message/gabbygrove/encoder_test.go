package gabbygrove

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/ugorji/go/codec"
	"go.cryptoscope.co/ssb"
)

func TestEncoder(t *testing.T) {
	r := require.New(t)
	a := assert.New(t)
	dead := bytes.Repeat([]byte("dead"), 8)
	kp, err := ssb.NewKeyPair(bytes.NewReader(dead))
	r.NoError(err)
	kp.Id.Algo = ssb.RefAlgoFeedGabby

	t.Log("kp:", kp.Id.Ref())

	fakeRef, _ := fromRef(&ssb.MessageRef{
		Hash: bytes.Repeat([]byte("beef"), 8),
		Algo: ssb.RefAlgoMessageGabby,
	})

	var msgs = []interface{}{
		"foo.box",
		map[string]interface{}{
			"type": "test",
			"i":    1,
		},
		map[string]interface{}{
			"type":       "contact",
			"contact":    kp.Id.Ref(),
			"spectating": true,
		},
	}

	want := [][]byte{
		[]byte{0x83, 0x58, 0x52, 0x84, 0xf6, 0xd9, 0x4, 0x1a, 0x58, 0x21, 0x1, 0xae, 0xd3, 0xda, 0xb6, 0x5c, 0xe9, 0xe0, 0xd6, 0xc5, 0xd, 0x46, 0xfc, 0xef, 0xfb, 0x55, 0x22, 0x96, 0xed, 0x21, 0xb6, 0xe0, 0xb5, 0x37, 0xa6, 0xa0, 0x18, 0x45, 0x75, 0xce, 0x8f, 0x5c, 0xbd, 0x1, 0x83, 0x1, 0x7, 0xd9, 0x4, 0x1a, 0x58, 0x21, 0x3, 0xe8, 0x6, 0xec, 0xf2, 0xb7, 0xc3, 0x7f, 0xb0, 0x6d, 0xc1, 0x98, 0xa9, 0xb9, 0x5, 0xbe, 0x64, 0xee, 0x3f, 0xdb, 0x82, 0x37, 0xef, 0x80, 0xd3, 0x16, 0xac, 0xb7, 0xc8, 0x5b, 0xbf, 0x5f, 0x2, 0x58, 0x40, 0x2f, 0xdc, 0x65, 0x40, 0x94, 0x6d, 0xdd, 0x4c, 0x4f, 0xef, 0x32, 0x28, 0xc5, 0x6f, 0x0, 0x62, 0xc3, 0xfb, 0x69, 0x6e, 0xc7, 0x75, 0x2c, 0x57, 0x39, 0x65, 0xf2, 0xb2, 0x42, 0x50, 0xc8, 0x41, 0x94, 0xa7, 0x6b, 0x3, 0xac, 0xc1, 0x9e, 0x2, 0x42, 0x10, 0x97, 0x1b, 0xb7, 0xcf, 0x14, 0xc8, 0xbf, 0x47, 0xd, 0x8f, 0xa4, 0x68, 0xf6, 0xfd, 0x6e, 0xdb, 0xf1, 0x84, 0x33, 0xf4, 0xc3, 0x8, 0x47, 0x66, 0x6f, 0x6f, 0x2e, 0x62, 0x6f, 0x78},
		[]byte{0x83, 0x58, 0x77, 0x84, 0xd9, 0x4, 0x1a, 0x58, 0x21, 0x2, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0xd9, 0x4, 0x1a, 0x58, 0x21, 0x1, 0xae, 0xd3, 0xda, 0xb6, 0x5c, 0xe9, 0xe0, 0xd6, 0xc5, 0xd, 0x46, 0xfc, 0xef, 0xfb, 0x55, 0x22, 0x96, 0xed, 0x21, 0xb6, 0xe0, 0xb5, 0x37, 0xa6, 0xa0, 0x18, 0x45, 0x75, 0xce, 0x8f, 0x5c, 0xbd, 0x2, 0x83, 0x1, 0x16, 0xd9, 0x4, 0x1a, 0x58, 0x21, 0x3, 0x95, 0xcc, 0xa4, 0xfa, 0x7b, 0x24, 0xab, 0xc6, 0x4, 0x96, 0x83, 0xe7, 0x16, 0x29, 0x2b, 0x0, 0xc4, 0x95, 0x9, 0xbe, 0x14, 0x7a, 0xa0, 0x24, 0xc0, 0x62, 0x86, 0xbd, 0x9b, 0x7d, 0xbd, 0xa8, 0x58, 0x40, 0xfe, 0xc7, 0x4, 0xa2, 0xc3, 0xa, 0xac, 0x81, 0xbf, 0x59, 0x59, 0xb7, 0x78, 0xb4, 0xdb, 0xba, 0x73, 0x21, 0xfa, 0xf0, 0x4f, 0xc5, 0xe1, 0x62, 0xa3, 0xb6, 0x56, 0x2, 0xa6, 0xfb, 0xcf, 0x27, 0xa8, 0x56, 0x99, 0x4b, 0xe7, 0xf7, 0xb8, 0xea, 0xba, 0xd5, 0x81, 0xc1, 0xd0, 0x10, 0x8d, 0x6c, 0x2f, 0x41, 0x24, 0xcf, 0x7a, 0xca, 0x8c, 0x1a, 0xd1, 0xc8, 0xbe, 0x4, 0xcf, 0xc, 0x7c, 0x0, 0x56, 0x7b, 0x22, 0x69, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x65, 0x73, 0x74, 0x22, 0x7d, 0xa},
		[]byte{0x83, 0x58, 0x78, 0x84, 0xd9, 0x4, 0x1a, 0x58, 0x21, 0x2, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0xd9, 0x4, 0x1a, 0x58, 0x21, 0x1, 0xae, 0xd3, 0xda, 0xb6, 0x5c, 0xe9, 0xe0, 0xd6, 0xc5, 0xd, 0x46, 0xfc, 0xef, 0xfb, 0x55, 0x22, 0x96, 0xed, 0x21, 0xb6, 0xe0, 0xb5, 0x37, 0xa6, 0xa0, 0x18, 0x45, 0x75, 0xce, 0x8f, 0x5c, 0xbd, 0x3, 0x83, 0x1, 0x18, 0x69, 0xd9, 0x4, 0x1a, 0x58, 0x21, 0x3, 0x27, 0xd0, 0xb2, 0x2f, 0x26, 0x32, 0x8f, 0x3, 0xff, 0xce, 0x2a, 0x7c, 0x66, 0xb2, 0xee, 0x27, 0xe3, 0x37, 0xca, 0x5d, 0x28, 0xcd, 0xc8, 0x9e, 0xad, 0x66, 0x8f, 0x1d, 0xd7, 0xf0, 0x21, 0x8b, 0x58, 0x40, 0xbb, 0x17, 0x50, 0x23, 0xf4, 0x86, 0x5e, 0x19, 0x71, 0xed, 0x1d, 0x42, 0x92, 0xa2, 0xb5, 0x53, 0xe5, 0x56, 0x8d, 0x63, 0x22, 0x7f, 0xc, 0x0, 0xaf, 0xb3, 0xec, 0x56, 0x1, 0xe6, 0x4e, 0xaf, 0xef, 0xbf, 0xa8, 0x7e, 0x7c, 0x8c, 0xe1, 0x8e, 0x8f, 0x24, 0xa1, 0xa4, 0xe3, 0x70, 0xc1, 0x22, 0x43, 0x61, 0x1e, 0xd5, 0x4d, 0x9a, 0x98, 0xfa, 0xfb, 0x7a, 0x8a, 0xc1, 0x96, 0x3b, 0xc0, 0xe, 0x58, 0x69, 0x7b, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x3a, 0x22, 0x40, 0x72, 0x74, 0x50, 0x61, 0x74, 0x6c, 0x7a, 0x70, 0x34, 0x4e, 0x62, 0x46, 0x44, 0x55, 0x62, 0x38, 0x37, 0x2f, 0x74, 0x56, 0x49, 0x70, 0x62, 0x74, 0x49, 0x62, 0x62, 0x67, 0x74, 0x54, 0x65, 0x6d, 0x6f, 0x42, 0x68, 0x46, 0x64, 0x63, 0x36, 0x50, 0x58, 0x4c, 0x30, 0x3d, 0x2e, 0x67, 0x67, 0x66, 0x65, 0x65, 0x64, 0x2d, 0x76, 0x31, 0x22, 0x2c, 0x22, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x7d, 0xa},
	}

	for msgidx, msg := range msgs {

		e := NewEncoder(kp)
		var prevRef *BinaryRef
		if msgidx != 0 {
			prevRef = fakeRef
		}
		seq := uint64(msgidx + 1)
		tr, msgRef, err := e.Encode(seq, prevRef, msg)
		r.NoError(err, "msg[%02d]Encode failed", msgidx)
		r.NotNil(msgRef)

		got, err := tr.MarshalCBOR()
		r.NoError(err, "msg[%02d]Marshal failed", msgidx)

		a.Equal(len(want[msgidx]), len(got), "msg[%02d] wrong msg length", msgidx)
		if !a.Equal(want[msgidx], got, "msg[%02d] compare failed", msgidx) {
			t.Log("got", hex.EncodeToString(got))
			t.Log("want", hex.EncodeToString(want[msgidx]))
		}

		r.True(tr.Verify(nil), "msg[%02d] did not verify", msgidx)

		var tr2 Transfer
		err = tr2.UnmarshalCBOR(got)
		r.NoError(err, "msg[%02d] test decode failed", msgidx)
		t.Logf("msg[%02d] transfer decode of %d bytes", msgidx, len(got))
		r.NotNil(tr2.Event)
		r.NotNil(tr2.Signature)
		r.NotNil(tr2.Content)

		t.Log("event bytes:", len(tr2.Event))
		t.Log(hex.EncodeToString(tr2.Event))

		var evt Event
		err = evt.UnmarshalCBOR(tr2.Event)
		r.NoError(err, "evt[%02d] unmarshal failed", msgidx)

		a.NotNil(evt.Author, "evt[%02d] has author", msgidx)
		a.Equal(seq, evt.Sequence)
		if msgidx == 0 {
			a.Nil(evt.Previous, "evt[%02d] has no previous", msgidx)
		} else {
			a.NotNil(evt.Previous, "evt[%02d] has previous", msgidx)
		}
		r.Equal(ContentTypeJSON, evt.Content.Type)
		a.NotEqual(0, evt.Content.Size)
	}
}

func TestEvtDecode(t *testing.T) {
	r := require.New(t)
	var input = "84d9041a5821026265656662656566626565666265656662656566626565666265656662656566d9041a582101aed3dab65ce9e0d6c50d46fceffb552296ed21b6e0b537a6a0184575ce8f5cbd0383011869d9041a58210327d0b22f26328f03ffce2a7c66b2ee27e337ca5d28cdc89ead668f1dd7f0218b"

	data, err := hex.DecodeString(input)
	r.NoError(err)
	r.NotNil(data)

	var evt Event
	evtDec := codec.NewDecoder(bytes.NewReader(data), GetCBORHandle())
	err = evtDec.Decode(&evt)
	r.NoError(err)
	r.NotNil(evt.Author)
	r.NotNil(evt.Previous)
	r.Equal(uint64(3), evt.Sequence)
}

func benchmarkEncoder(i int, b *testing.B) {
	r := require.New(b)

	dead := bytes.Repeat([]byte("dead"), 8)
	kp, err := ssb.NewKeyPair(bytes.NewReader(dead))
	r.NoError(err)
	kp.Id.Algo = ssb.RefAlgoFeedGabby

	e := NewEncoder(kp)

	fakeRef, _ := fromRef(&ssb.MessageRef{
		Hash: []byte("herberd"),
		Algo: ssb.RefAlgoMessageGabby,
	})

	msg := map[string]interface{}{
		"type":       "contact",
		"contact":    kp.Id.Ref(),
		"spectating": true,
	}
	b.ResetTimer()
	for n := 0; n < b.N; n++ {

		for k := i; k > 0; k-- {
			tr, msgRef, err := e.Encode(uint64(k+1), fakeRef, msg)
			r.NoError(err, "msg[%02d]Encode failed")
			r.NotNil(tr)
			r.NotNil(msgRef)
			// r.True(tr.Verify())
		}
	}
}

func BenchmarkEncoder5(b *testing.B)   { benchmarkEncoder(5, b) }
func BenchmarkEncoder500(b *testing.B) { benchmarkEncoder(500, b) }
func BenchmarkEncoder20k(b *testing.B) { benchmarkEncoder(20000, b) }

func benchmarkVerify(i int, b *testing.B) {
	r := require.New(b)

	dead := bytes.Repeat([]byte("dead"), 8)
	kp, err := ssb.NewKeyPair(bytes.NewReader(dead))
	r.NoError(err)
	kp.Id.Algo = ssb.RefAlgoFeedGabby

	e := NewEncoder(kp)

	fakeRef, _ := fromRef(&ssb.MessageRef{
		Hash: bytes.Repeat([]byte("herb"), 8),
		Algo: ssb.RefAlgoMessageGabby,
	})

	msg := true
	var trs []Transfer
	for k := i; k > 0; k-- {
		tr, msgRef, err := e.Encode(uint64(k+1), fakeRef, msg)
		r.NoError(err, "msg[%02d]Encode failed")
		r.NotNil(tr)
		r.NotNil(msgRef)
		r.True(tr.Verify(nil))
		trs = append(trs, *tr)
	}
	b.ResetTimer()
	for n := 0; n < b.N; n++ {
		for _, tr := range trs {
			r.True(tr.Verify(nil))
		}
	}
}

func BenchmarkVerify5(b *testing.B)   { benchmarkVerify(5, b) }
func BenchmarkVerify500(b *testing.B) { benchmarkVerify(500, b) }
func BenchmarkVerify20k(b *testing.B) { benchmarkVerify(20000, b) }
