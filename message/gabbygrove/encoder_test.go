package gabbygrove

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/ugorji/go/codec"
	"go.cryptoscope.co/ssb"
)

func TestEncoder(t *testing.T) {
	r := require.New(t)
	a := assert.New(t)
	dead := bytes.Repeat([]byte("dead"), 8)
	kp, err := ssb.NewKeyPair(bytes.NewReader(dead))
	r.NoError(err)
	kp.Id.Algo = ssb.RefAlgoGabby

	t.Log("kp:", kp.Id.Ref())

	fakeRef, _ := fromRef(&ssb.MessageRef{
		Hash: bytes.Repeat([]byte("beef"), 8),
		Algo: ssb.RefAlgoGabby,
	})

	var msgs = []interface{}{
		"foo.box",
		map[string]interface{}{
			"type": "test",
			"i":    1,
		},
		map[string]interface{}{
			"type":       "contact",
			"contact":    kp.Id.Ref(),
			"spectating": true,
		},
	}

	want := [][]byte{
		[]byte{0xa3, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x66, 0x6f, 0x6f, 0x2e, 0x62, 0x6f, 0x78, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x58, 0x82, 0xa4, 0x66, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0xd9, 0x3, 0x78, 0x58, 0x21, 0x1, 0xae, 0xd3, 0xda, 0xb6, 0x5c, 0xe9, 0xe0, 0xd6, 0xc5, 0xd, 0x46, 0xfc, 0xef, 0xfb, 0x55, 0x22, 0x96, 0xed, 0x21, 0xb6, 0xe0, 0xb5, 0x37, 0xa6, 0xa0, 0x18, 0x45, 0x75, 0xce, 0x8f, 0x5c, 0xbd, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0xa3, 0x64, 0x48, 0x61, 0x73, 0x68, 0xd9, 0x3, 0x78, 0x58, 0x21, 0x3, 0xe8, 0x6, 0xec, 0xf2, 0xb7, 0xc3, 0x7f, 0xb0, 0x6d, 0xc1, 0x98, 0xa9, 0xb9, 0x5, 0xbe, 0x64, 0xee, 0x3f, 0xdb, 0x82, 0x37, 0xef, 0x80, 0xd3, 0x16, 0xac, 0xb7, 0xc8, 0x5b, 0xbf, 0x5f, 0x2, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x7, 0x64, 0x54, 0x79, 0x70, 0x65, 0x1, 0x68, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0xf6, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x1, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x58, 0x40, 0x49, 0xa3, 0xc9, 0x4d, 0x52, 0x1, 0x66, 0xcf, 0xe4, 0x20, 0x29, 0xfa, 0xdf, 0x6a, 0x2c, 0x2c, 0x92, 0x9d, 0x50, 0x6f, 0xa1, 0x3, 0x61, 0xe1, 0xd5, 0xeb, 0xb4, 0xcf, 0x75, 0x36, 0xf8, 0xc6, 0xbf, 0x7c, 0x3c, 0xe4, 0xea, 0xba, 0xd1, 0xab, 0xf6, 0x44, 0xd2, 0x87, 0xed, 0xd, 0xd4, 0x4, 0xde, 0xb2, 0x46, 0x2e, 0xda, 0x6f, 0x92, 0x1b, 0x14, 0x47, 0x6c, 0x4d, 0x68, 0xac, 0x88, 0x0},

		[]byte{0xa3, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x7b, 0x22, 0x69, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x65, 0x73, 0x74, 0x22, 0x7d, 0xa, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x58, 0xa7, 0xa4, 0x66, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0xd9, 0x3, 0x78, 0x58, 0x21, 0x1, 0xae, 0xd3, 0xda, 0xb6, 0x5c, 0xe9, 0xe0, 0xd6, 0xc5, 0xd, 0x46, 0xfc, 0xef, 0xfb, 0x55, 0x22, 0x96, 0xed, 0x21, 0xb6, 0xe0, 0xb5, 0x37, 0xa6, 0xa0, 0x18, 0x45, 0x75, 0xce, 0x8f, 0x5c, 0xbd, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0xa3, 0x64, 0x48, 0x61, 0x73, 0x68, 0xd9, 0x3, 0x78, 0x58, 0x21, 0x3, 0x95, 0xcc, 0xa4, 0xfa, 0x7b, 0x24, 0xab, 0xc6, 0x4, 0x96, 0x83, 0xe7, 0x16, 0x29, 0x2b, 0x0, 0xc4, 0x95, 0x9, 0xbe, 0x14, 0x7a, 0xa0, 0x24, 0xc0, 0x62, 0x86, 0xbd, 0x9b, 0x7d, 0xbd, 0xa8, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x16, 0x64, 0x54, 0x79, 0x70, 0x65, 0x1, 0x68, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0xd9, 0x3, 0x78, 0x58, 0x21, 0x2, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x58, 0x40, 0xf0, 0x5b, 0x3d, 0xa4, 0xb3, 0x89, 0xc, 0xca, 0xa2, 0xea, 0x31, 0xac, 0xad, 0xd9, 0x21, 0x8f, 0xc2, 0xa2, 0x4, 0x41, 0x3, 0xe4, 0x26, 0xd9, 0xd6, 0x75, 0x51, 0x6, 0xbd, 0x6a, 0x49, 0x77, 0x83, 0xd, 0x4b, 0xa2, 0xa, 0x64, 0xd0, 0x3, 0x49, 0x9d, 0x40, 0x34, 0x7, 0xf1, 0xbd, 0x40, 0x4e, 0x7b, 0x9b, 0xd9, 0x18, 0xa1, 0x4, 0x1c, 0xcf, 0x65, 0x18, 0x6c, 0x9b, 0x38, 0xa7, 0x0},

		[]byte{0xa3, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x58, 0x65, 0x7b, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x3a, 0x22, 0x40, 0x72, 0x74, 0x50, 0x61, 0x74, 0x6c, 0x7a, 0x70, 0x34, 0x4e, 0x62, 0x46, 0x44, 0x55, 0x62, 0x38, 0x37, 0x2f, 0x74, 0x56, 0x49, 0x70, 0x62, 0x74, 0x49, 0x62, 0x62, 0x67, 0x74, 0x54, 0x65, 0x6d, 0x6f, 0x42, 0x68, 0x46, 0x64, 0x63, 0x36, 0x50, 0x58, 0x4c, 0x30, 0x3d, 0x2e, 0x67, 0x61, 0x62, 0x62, 0x79, 0x22, 0x2c, 0x22, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x7d, 0xa, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x58, 0xa8, 0xa4, 0x66, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0xd9, 0x3, 0x78, 0x58, 0x21, 0x1, 0xae, 0xd3, 0xda, 0xb6, 0x5c, 0xe9, 0xe0, 0xd6, 0xc5, 0xd, 0x46, 0xfc, 0xef, 0xfb, 0x55, 0x22, 0x96, 0xed, 0x21, 0xb6, 0xe0, 0xb5, 0x37, 0xa6, 0xa0, 0x18, 0x45, 0x75, 0xce, 0x8f, 0x5c, 0xbd, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0xa3, 0x64, 0x48, 0x61, 0x73, 0x68, 0xd9, 0x3, 0x78, 0x58, 0x21, 0x3, 0x6, 0xc4, 0x77, 0x0, 0x47, 0x74, 0xcf, 0xeb, 0x58, 0x9f, 0x45, 0xb9, 0x68, 0x4f, 0x14, 0x4a, 0x8a, 0x9, 0xd2, 0xf9, 0x4f, 0x71, 0x2a, 0x54, 0xef, 0x4e, 0x8e, 0xb9, 0x21, 0x16, 0xee, 0xcd, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x1, 0x68, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0xd9, 0x3, 0x78, 0x58, 0x21, 0x2, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x62, 0x65, 0x65, 0x66, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x3, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x58, 0x40, 0xdb, 0xd3, 0xde, 0x53, 0xaa, 0x33, 0x28, 0xcf, 0xbe, 0x5c, 0xe6, 0x1a, 0x45, 0xe2, 0x49, 0xd7, 0x41, 0x3b, 0x16, 0xfa, 0x4f, 0x3d, 0xe6, 0xb9, 0x65, 0x30, 0xe5, 0xe9, 0x2b, 0x3c, 0x62, 0x9f, 0xf1, 0xe7, 0x6c, 0xa5, 0xe, 0x6d, 0x3c, 0x96, 0x9, 0xe, 0x4b, 0xc0, 0x67, 0x12, 0x34, 0x92, 0x8c, 0xcf, 0x7b, 0x4e, 0x11, 0x53, 0x5b, 0xd3, 0xc, 0x18, 0xa6, 0x3d, 0x82, 0x14, 0xe, 0x7},
	}

	for msgidx, msg := range msgs {

		e := NewEncoder(kp)
		var prevRef *BinaryRef
		if msgidx != 0 {
			prevRef = fakeRef
		}
		seq := uint64(msgidx + 1)
		tr, msgRef, err := e.Encode(seq, prevRef, msg)
		r.NoError(err, "msg[%02d]Encode failed", msgidx)
		r.NotNil(msgRef)

		var trBuf bytes.Buffer
		enc := codec.NewEncoder(&trBuf, GetCBORHandle())
		err = enc.Encode(tr)
		r.NoError(err, "msg[%02d]Marshal failed", msgidx)
		got := trBuf.Bytes()

		a.Len(got, len(want[msgidx]), "msg[%02d] wrong msg length", msgidx)
		a.Equal(want[msgidx], got, "msg[%02d] compare failed", msgidx)

		var tr2 Transfer
		dec := codec.NewDecoder(bytes.NewReader(got), GetCBORHandle())
		err = dec.Decode(&tr2)
		r.NoError(err, "msg[%02d] test decode failed", msgidx)
		t.Logf("msg[%02d] transfer decode of %d bytes", msgidx, len(got))
		r.NotNil(tr2.Event)
		r.NotNil(tr2.Signature)
		r.NotNil(tr2.Content)

		var evt Event
		err = evt.UnmarshalCBOR(tr2.Event)
		r.NoError(err)

		a.NotNil(evt.Author, "evt[%02d] has author", msgidx)
		a.Equal(seq, evt.Sequence)
		if msgidx == 0 {
			a.Nil(evt.Previous, "evt[%02d] has no previous", msgidx)
		} else {
			a.NotNil(evt.Previous, "evt[%02d] has previous", msgidx)
		}
		r.Equal(ContentTypeJSON, evt.Content.Type)
		a.NotEqual(0, evt.Content.Size)
	}
}

func TestEvtDecode(t *testing.T) {
	r := require.New(t)
	var input = "a466417574686f72d90378582101aed3dab65ce9e0d6c50d46fceffb552296ed21b6e0b537a6a0184575ce8f5cbd67436f6e74656e74a36448617368d9037858210306c477004774cfeb589f45b9684f144a8a09d2f94f712a54ef4e8eb92116eecd6453697a6518656454797065016850726576696f7573d9037858210262656566626565666265656662656566626565666265656662656566626565666853657175656e636503"

	data, err := hex.DecodeString(input)
	r.NoError(err)
	r.NotNil(data)

	var evt Event
	evtDec := codec.NewDecoder(bytes.NewReader(data), GetCBORHandle())
	err = evtDec.Decode(&evt)
	r.NoError(err)
	r.NotNil(evt.Author)
	r.NotNil(evt.Previous)
	r.NotEqual(uint64(0), evt.Sequence)
}

func benchmarkEncoder(i int, b *testing.B) {
	r := require.New(b)

	dead := bytes.Repeat([]byte("dead"), 8)
	kp, err := ssb.NewKeyPair(bytes.NewReader(dead))
	r.NoError(err)
	kp.Id.Algo = ssb.RefAlgoProto

	e := NewEncoder(kp)

	fakeRef, _ := fromRef(&ssb.MessageRef{
		Hash: []byte("herberd"),
		Algo: ssb.RefAlgoSHA256,
	})

	msg := map[string]interface{}{
		"type":       "contact",
		"contact":    kp.Id.Ref(),
		"spectating": true,
	}

	for n := 0; n < b.N; n++ {

		for k := i; k > 0; k-- {
			tr, msgRef, err := e.Encode(uint64(n+1), fakeRef, msg)
			r.NoError(err, "msg[%02d]Encode failed")
			r.NotNil(tr)
			r.NotNil(msgRef)
			// r.True(tr.Verify())
		}
	}
}

func BenchmarkEncoder5(b *testing.B)   { benchmarkEncoder(5, b) }
func BenchmarkEncoder500(b *testing.B) { benchmarkEncoder(500, b) }
func BenchmarkEncoder20k(b *testing.B) { benchmarkEncoder(20000, b) }
